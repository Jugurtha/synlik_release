},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(exp(res[[1]]$mcmcSample))
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = log(0.5),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
dunif(exp(input), 0, 3, log = TRUE) + input
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(exp(res[[1]]$mcmcSample))
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = log(0.5),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
dunif(exp(input), 0, 3, log = TRUE) + input
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(exp(res[[1]]$mcmcSample))
ilogistic
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.5),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
1
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(exp(res[[1]]$mcmcSample))
hist(logistic(res[[1]]$mcmcSample))
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.5),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
input + log(1 - logistic(input))
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.5),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
input + log(1 + logistic(input))
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.5),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
input
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
ilogistic(0.5)
ilogistic
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.5),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
(1 - input) / (input)
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
head(logistic(res[[1]]$mcmcSample))
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.5),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
(1 - input) * (input)
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.5),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
(1 - input) * (input)
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
ilogistic
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.01),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
(1 - input) * (input)
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.01),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
((1 - input) * (input))^2
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.01),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
(1 - input) * (input)
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
hist(res[[1]]$mcmcSample)
hist(logistic(res[[1]]$mcmcSample))
logistic
ilogistic
logistic(10)
ilogistic(logistic(10))
ilogistic(logistic(1))
ilogistic(logistic(0))
ilogistic(logistic(-1))
ilogistic
logistic
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.01),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
log((1 - input) * (input))
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
logistic
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.01),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
-input - 2*log(1 + exp(-input))
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.01),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
-input - 2*log(1 + exp(-input))
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.01),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
-input - 2*log(1 + exp(-input))
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
library(pompExamples)
library(synlik)
library(parallel)
source("~/Desktop/All/Dropbox/Work/Programming/New_SL/synlik/Examples/bud_pomp_functions.R")
source("~/Desktop/All/Dropbox/Work/Programming/New_SL/synlik/Examples/bud_synlik_functions.R")
#######
# Create model
#######
pompModel <- budModCreator("tri")
truepar <- pompModel@params
pompModel@userdata$logitvar
pompModel <- budModCreator("tri")
truepar <- pompModel@params
bud_sl <- new("synlik",
simulator = budSimul,
summaries = budStats,
param = pompModel@params,
extraArgs = list("pompModel" = pompModel)
)
#### Simulate from the object
bud_sl@data <- simulate(bud_sl)
bud_sl@extraArgs$obsData <- bud_sl@data
# Put the parameters in a transformed scale
initPar <- pompModel@params
initPar[pompModel@userdata$logitvar] <- ilogistic(initPar[pompModel@userdata$logitvar])
initPar[pompModel@userdata$logvar] <- log(initPar[pompModel@userdata$logvar])
tim <- proc.time()
bud_sl    <- synMcmc(bud_sl,
initPar = initPar,
nIter = 10,
nsim = 500,
propCov = 0.1 * diag(rep(0.001, 19)^2),
burnIn = 0,
priorFun = function(input, ...){
names(input) <- names(pompModel@params)
sum(input[pompModel@userdata$logvar]) + # inverting log-transformation
sum(-input[pompModel@userdata$logitvar] - # inverting inverse logistic transformation
2*log(1 + exp(-input[pompModel@userdata$logitvar]))
},
recompute = FALSE,
trans = TRUE,
multicore = FALSE,
control= list("ncores" = 2))
tim <- proc.time() - tim
# Put the parameters in a transformed scale
initPar <- pompModel@params
initPar[pompModel@userdata$logitvar] <- ilogistic(initPar[pompModel@userdata$logitvar])
initPar[pompModel@userdata$logvar] <- log(initPar[pompModel@userdata$logvar])
tim <- proc.time()
bud_sl    <- synMcmc(bud_sl,
initPar = initPar,
nIter = 10,
nsim = 500,
propCov = 0.1 * diag(rep(0.001, 19)^2),
burnIn = 0,
priorFun = function(input, ...){
names(input) <- names(pompModel@params)
sum(input[pompModel@userdata$logvar]) + # inverting log-transformation
sum(-input[pompModel@userdata$logitvar] - # inverting inverse logistic transformation
2*log(1 + exp(-input[pompModel@userdata$logitvar])))
},
recompute = FALSE,
trans = TRUE,
multicore = FALSE,
control= list("ncores" = 2))
tim <- proc.time() - tim
plot(bud_sl,
trans = list(
parName = c(pompModel@userdata$logvar, pompModel@userdata$logitvar),
transform = c(rep("exp", length(pompModel@userdata$logvar)), rep("logistic", length(pompModel@userdata$logitvar)))
))
priorFun = function(input, ...) {
-input - 2*log(1 + exp(-input))
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
library(synlik)
library(pompExamples)
source("~/Desktop/All/Dropbox/Work/Programming/New_SL/synlik/Examples/bud_pomp_functions.R")
source("~/Desktop/All/Dropbox/Work/Programming/New_SL/synlik/Examples/bud_synlik_functions.R")
########
#### Create model and simulate data
########
pompModel <- budModCreator("tri")
pompModel <- simulate(pompModel)
plot(pompModel)
truepar <- pompModel@params
# Trying particle filter
pompModel <- pfilter(pompModel, Np = 1000)
pompModel@loglik
# Put the parameters in a transformed scale
initPar <- pompModel@params
initPar[pompModel@userdata$logitvar] <- ilogistic(initPar[pompModel@userdata$logitvar])
initPar[pompModel@userdata$logvar] <- log(initPar[pompModel@userdata$logvar])
data(prop_bud_pmcmc)
nCores <- 4
tim <- proc.time()
results    <-   mclapply(1:nCores,
function(input){
pompModel <- simulate(pompModel)
budPMCMC(pompModel,
initPar = initPar,
nIter = 10,
nsim = 500,
propCov = 0.1 * prop_bud_pmcmc, #diag(rep(0.0005, length(initPar))^2),
burnIn = 0,
priorFun = function(input, ...){
names(input) <- names(pompModel@params)
sum(input[pompModel@userdata$logvar]) + # inverting log-transformation
sum(-input[pompModel@userdata$logitvar] - # inverting inverse logistic transformation
2*log(1 + exp(-input[pompModel@userdata$logitvar]))) +
dunif(exp(input[c("sig.alpha", "sig.lambda", "sig.a", "sigQobs", "sigNobs", "sigSobs")]), 0.001, 100, log = TRUE)
},
recompute = FALSE,
trans = TRUE)
},
mc.cores = nCores)
tim <- proc.time() - tim
tmpCov <- matrix(0, 19, 19)
for(pathInd in 1:nCores)
{
tmpMat <- results[[pathInd]]$mcmcSample
par(mfrow = c(5, 4))
for(ii in 1:ncol(tmpMat))
{
tmp <- tmpMat[ , ii]
if(names(initPar[ii]) %in% pompModel@userdata$logvar) tmp <- exp(tmp)
if(names(initPar[ii]) %in% pompModel@userdata$logitvar) tmp <- logistic(tmp)
plot(tmp, type = 'l', main = names(pompModel@params)[ii])
abline(h = pompModel@params[ii], col = 2)
}
tmpCov <- tmpCov + cov(tmpMat)
#Sys.sleep(1)
}
# Put the parameters in a transformed scale
initPar <- pompModel@params
initPar[pompModel@userdata$logitvar] <- ilogistic(initPar[pompModel@userdata$logitvar])
initPar[pompModel@userdata$logvar] <- log(initPar[pompModel@userdata$logvar])
data(prop_bud_pmcmc)
nCores <- 4
tim <- proc.time()
results    <-   mclapply(1:nCores,
function(input){
pompModel <- simulate(pompModel)
budPMCMC(pompModel,
initPar = initPar,
nIter = 10000,
nsim = 500,
propCov = 0.1 * prop_bud_pmcmc, #diag(rep(0.0005, length(initPar))^2),
burnIn = 0,
priorFun = function(input, ...){
names(input) <- names(pompModel@params)
sum(input[pompModel@userdata$logvar]) + # inverting log-transformation
sum(-input[pompModel@userdata$logitvar] - # inverting inverse logistic transformation
2*log(1 + exp(-input[pompModel@userdata$logitvar]))) +
dunif(exp(input[c("sig.alpha", "sig.lambda", "sig.a", "sigQobs", "sigNobs", "sigSobs")]), 0.001, 100, log = TRUE)
},
recompute = FALSE,
trans = TRUE)
},
mc.cores = nCores)
tim <- proc.time() - tim
tmpCov <- matrix(0, 19, 19)
for(pathInd in 1:nCores)
{
tmpMat <- results[[pathInd]]$mcmcSample
par(mfrow = c(5, 4))
for(ii in 1:ncol(tmpMat))
{
tmp <- tmpMat[ , ii]
if(names(initPar[ii]) %in% pompModel@userdata$logvar) tmp <- exp(tmp)
if(names(initPar[ii]) %in% pompModel@userdata$logitvar) tmp <- logistic(tmp)
plot(tmp, type = 'l', main = names(pompModel@params)[ii])
abline(h = pompModel@params[ii], col = 2)
}
tmpCov <- tmpCov + cov(tmpMat)
#Sys.sleep(1)
}
tim <- proc.time()
nCores <- 6
res <- mclapply(1:nCores,
function(input){
tmpMCMC(1,
initPar = ilogistic(0.01),
nIter = 100000,
burnIn = 0,
priorFun = function(input, ...) {
-input - 2*log(1 + exp(-input))
},
propCov = diag(0.1, 1),
nsim = 1e3)
},
mc.cores = nCores
)
tim <- proc.time() - tim
hist(logistic(res[[1]]$mcmcSample))
